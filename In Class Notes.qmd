---
title: "In Class Notes"
format: html
editor: visual
---

## March 11 

## Maximum Liklihood estimation

a different approach than ordinary least squares regression

we want to find the parameter values that maximize the probability of observing the data

(the observed outcome variable values associated with the observed combination of predictor varaible values.

### example 

-   a likelihood is just a product of a set of probabilities (a sum of log probabiiltes)

-   What is the probability of observing a particular piece of data given a set of parameter values and a model for the data? For data generated by a Gaussian (normal)

-   calculate the maximum product of proability of a given model

    ### formula

    probability of ( x , \| given mean, and standard deviation ) =

    calculate each probability and multiply together;

```{r}
library(dplyr)
library(ggplot2)
library(tidyverse)
d <- tibble(val = rnorm(50, mean = 50, sd = 10))
d
ggplot(d)+
  geom_histogram(aes(x = val, y = after_stat(density)))
```

```{r}
library(tidyverse)
#plot normal curve 
d <- tibble(val = rnorm(50, mean = 50, sd = 10))

ggplot(d) +
  geom_histogram(aes(x = val, y = after_stat(density))) +
  stat_function(fun = function(x) dnorm(x, mean = 50, sd = 10), color = "red", linewidth = 1) +
  stat_function(fun = function(x) dnorm(x, mean = 65, sd = 10), color = "blue", linewidth = 1)
```


```{r}

val <- 41
m <- 50    # mean value
sd <- 10   # standard deviation
(likelihood <- 1/sqrt(2*pi*sd^2)*exp((-(val-m)^2)/(2*sd^2)))

```



```{r}


(likelihood <- 1/sqrt(2*pi*sd^2)*exp((-(val-m)^2)/(2*sd^2)))
nll <- -1 *log(likelihood) # negative log likelihood

#likelihood of seeing balu eof 41 if mean = 50 and sd = 10

val <-c(70, 75, 50)
mean <-65
sd <- 10 
(prob <- 1/sqrt(2*pi*sd^2)*exp((-(val-m)^2)/(2*sd^2)))
```



```{r}
(likelihood <- 1/sqrt(2*pi*sd^2)*exp((-(val-m)^2)/(2*sd^2)))*log(likelihood)

likelihood <- dnorm(val, mean, sd)
nll <- -1 *log(likelihood) #natrual log

summed_nll<- sum(nll) # each of the likehood of 3 draws 

```

```{r}
val <- c(70, 75, 50 )
mean <-65
sd <-10

(prob <- 1/sqrt(2*pi*sd^2)*exp((-(val-m)^2)/(2*sd^2)))

like <- prob[1] *prob[2] *prob[3]
-1*log(like)
```

```{r}
#function calculates negative log likelihood

verbose_nll <-function(val, mu, sigma){
  ll <-0
  likelihood <- 0 
  for (i in 1: length(val)){
    likelihood[[i]] = dnorm(val[[i]], mean = mu, sd = sigma)
    ll[[i]] <-log(likelihood[[i]])
    message(paste0(val[[i]], " ", mean, " ", sd, " ", ll[[i]]))
  }
  nll <-1- -1*sum(ll)
  return(nll)
}

val <- c(70, 75, 50)
mean <- 65
sd <- 10

verbose_nll(val, mean, sd)


val <-c(70, 75, 50)
mean <- 50
sd<- 10
verbose_nll(val, mean, sd)
```

Simple log likehood function
```{r}
#calculating the log likelihood is the sum of passing vector value into dnrom 
# calculating the log likelihood is the sum of passing vector value into dnorm 
simple_nll <- function(mu, sigma, verbose = FALSE) {
  ll = sum(dnorm(val, mean = mu, sd = sigma, log = TRUE))
  nll <- -1 * ll
  if (verbose == TRUE) {
    message(paste0("mean=", mu, "sigma=", sigma, " nll= ", nll))
    return(nll)
  }
  return(nll)
}

val <- c(70, 75, 50)
mean <-65
sd <- 10
simple_nll(mean, sd)

```

Using Optim package that uses different algorithims

uses the simple_nll function we created above


```{r}
val <- rnorm( 5000, 50, 10 )

library(bbmle)

mle_norm <-bbmle::mle2(
  minuslogl = simple_nll,
  start = list(mu = 0, sigma = 1),
  method = "SANN", # simulated annealing method of optimization
  trace = TRUE
)

mle_norm

mean(val)
sd(val)
```
## estimating p values using regression using permutation

```{r}
library(mosaic)
library(dplyr)
f<-"https://raw.githubusercontent.com/difiore/ada-datasets/main/zombies.csv"
d<-read_csv(f, col_names = TRUE)
m <-lm(data = d, height ~ weight)
broom::tidy(m)
obs_slope <-broom::tidy(m) |>
  filter(term == "weight")|>
  pull(estimate)

#using do loop to get a permutation distribution for slope

nperm <-1000
perm <-do(nperm) * {
  d_new <-d
  d_new$weight <-sample(d_new$weight)
  m<- lm(data = d_new, height~weight)
  broom::tidy(m) |>
    filter(term == "weight")|>
    pull(estimate)
}

histrogram(perm$result)
#calculate se as sd of permutaion distribution

(perm.se <-sd(per$result))
```